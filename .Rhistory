a <- available.packages()
head(rownames(a),3)
install.packages("sladify")
install.packages("slidify")
install.packages("slidify")
installed.packages("ggplot2")
install.packages("ggplot2")
install.packages("KernSmooth")
load(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
library(ggplot2)
## This is a markdown file
## This is a markdown file
## This is a markdown file
## This is a markdown file
## This is a markdown file
## This is a markdown file
library(swirl)
install.packages("swirl")
install.packages("openssl")
library(openssl)
install.packages("codetools")
load(codetools)
install.packages("swirl")
install.packages("httr")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
C(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
list.files().args()
list.files(args())
list.files(args(all.files))
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("test3.R")
file.patch("testdir")
info()
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Virgis")
my_name <- c(my_char, "Virgis")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(c[3],c[5], c[7])
c([3], [5], [7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <-[1:20]
my_vector <-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
swirl()
exists()
x <- ("a",  "b", "c", "d")
x <- ("a", "b", "c", "d")
x <- c("a", "b", "c", "d")
for (i in seq_along(X)) {
print(x[i])
}
for (i in seq_along(x)) {
print(x[i])
}
for (letter in x) {
print(letter)
}
library(swirl)
swirl()
head(flags)
dim(fags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(pants)
head(pant)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,prob = c(0.3, 0.7))
flips <- sample(c(0,1),100,replacement=TRUE,prob = c(0.3, 0.7))
flips <- sample(c(0,1),100,replacement=TRUE,prob = c(0.3, 0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(10)
rpois(10,5)
rpois(5,10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab = "Stopping Distance", main="My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot Subtite")
plot(cars, sub()= "My Plot Subtite")
plot(cars, sub= "My Plot Subtite")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars,lwd=10)
plot(cars, xlim = c(10, 15))
plot(cars, pch=2)
mtcars
data(mtcars)
?bocplot
?boxplot
bocplot(data=mtcarsformula=mgp ~ cyl)
bocplot(data=mtcars,formula=mgp ~ cyl)
boxplot(data=mtcars,formula=mgp ~ cyl)
boxplot(formula=mgp ~ cyl,mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(iris)
library("iris")
install.packages("iris")
?iris
library(iris)
install.packages("iris")
library(installr)
updateR()
library(iris)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages('datasets',...)
install.packages('datasets','iris')
install.packages("datasets", "iris")
install.packages("datasets", "iris")
install.packages("datasets", "iris")
library(iris)
install.packages("iris")
library(Iris)
install.packages("Iris")
ap <- available.packages()
View(ap)
library(datasets)
data("iris")
mean(Sepal.Length)
mean("Sepal.Length")
library(datasets)
data(iris)
round(mean(iris[which(iris$Species == "virginica"),]$Sepal.Length))
library(datasets)
data(mtcars)
?mtcars
iris
mtcars
set.seed(1)
rpois(5,2)
best("SC", "heart attack")
i <- solve(data, ...)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
getwd()
setwd("/home/virgis/Desktop/ProgrammingAssignment2-master")
getwd()
git status
source('~/Desktop/ProgrammingAssignment2-master/cachematrix.R')
